/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.carssalessystem;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Alaa
 */
public class viewCars extends javax.swing.JFrame {

    /**
     * Creates new form viewCars
     */
    public viewCars() throws SQLException {
        initComponents();
        showCar();
        change.setVisible(false);
        delete.setVisible(false);
        update.setVisible(false);
        logout.setVisible(false);
        buy.setVisible(false);
        type.setEditable(false);
        model.setEditable(false);
        year.setEditable(false);
        price.setEditable(false);
        logout.setVisible(false);
        // to make admins only able to edit data
        if (Global.userOrAdmin.equals("Admin")) {
            type.setEditable(true);
            model.setEditable(true);
            year.setEditable(true);
            price.setEditable(true);            
        }
        //to show buy button only if a user logins
        else if (Global.userOrAdmin.equals("User")) {
            logout.setVisible(true);    
            buy.setVisible(true);
        }
    }
    private void reset(){
        type.setText("");
        model.setText("");
        year.setText("");
        price.setText("");
        imageLabel.setIcon(null);
        delete.setVisible(false);
        update.setVisible(false);
        change.setVisible(false);
    }
    public ArrayList<colorPair> colorList() throws SQLException{
        ArrayList<colorPair> colorList = new ArrayList<>();
          ResultSet rs;
          connection conn = new connection();
          String query ="Select * from colors where ID = ?";
          PreparedStatement pst = conn.conn.prepareStatement(query); 
          pst.setInt(1, ID);
          rs = pst.executeQuery();
          colorPair color;
          while (rs.next()){
            color = new colorPair(rs.getString("color"), rs.getString("number_of_cars"));
            colorList.add(color);            
          }
          conn.Close();
          return colorList;         
    }
    String query1="Select * from cars";
    public ArrayList<car> carsList() throws SQLException{
        ArrayList<car> carsList = new ArrayList<>();
          ResultSet rs;
          connection conn = new connection();
          Statement st = conn.conn.createStatement();
          rs = st.executeQuery(query1);
          car Car;
          while (rs.next()){
            Car = new car(rs.getInt("ID"), rs.getString("manufacturer_type"), rs.getString("model"),rs.getString("manufacture_year"),rs.getString("price"));
            carsList.add(Car);            
          }
          conn.Close();
          return carsList;         
    }
     ArrayList<car> list;
    public void showCar() throws SQLException{
        list = carsList(); 
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        Object[] row = new Object[3];       
        for (int i =0;i<list.size();i++){          
            row[0]=list.get(i).getType();
            row[1]=list.get(i).getModel();
            row[2]=list.get(i).getID();
            model.addRow(row);
        }
        table.getColumnModel().getColumn(2).setWidth(0);
        table.getColumnModel().getColumn(2).setMinWidth(0);
        table.getColumnModel().getColumn(2).setMaxWidth(0); 
    }
    public void showColor() throws SQLException{
        ArrayList<colorPair> colorList = colorList();
        DefaultTableModel colorModel = (DefaultTableModel)colorTable.getModel();
        colorModel.setRowCount(0);
        Object[] colorRow = new Object[2];
        for (int i =0;i<colorList.size();i++){
           
            colorRow[0]=colorList.get(i).getColor();
            colorRow[1]=colorList.get(i).getNumber();
            colorModel.addRow(colorRow);   
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        model = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        type = new javax.swing.JTextField();
        year = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        colorTable = new javax.swing.JTable();
        change = new javax.swing.JButton();
        search = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        logout = new javax.swing.JButton();
        buy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Manufacturer type:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Manufacture year:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Model:");

        model.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText(" Available colors:");

        type.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        year.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        price.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][][] {

            },
            new String [] {
                "Type", "Model", "ID"
            }
        )    {public boolean isCellEditable(int row, int column){return false;}}
    );
    table.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(table);

    jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(0, 0, 153));
    jLabel7.setText(" Price:");

    jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(0, 0, 153));
    jLabel3.setText("Select a car to display its details");

    imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            imageLabelMouseClicked(evt);
        }
    });

    delete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    delete.setForeground(new java.awt.Color(0, 0, 153));
    delete.setText("Delete");
    delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteActionPerformed(evt);
        }
    });

    update.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    update.setForeground(new java.awt.Color(0, 0, 153));
    update.setText("Update");
    update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    update.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateActionPerformed(evt);
        }
    });

    back.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    back.setForeground(new java.awt.Color(0, 0, 153));
    back.setText("Back");
    back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    back.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backActionPerformed(evt);
        }
    });

    colorTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Color", "Number"
        }
    )
    {public boolean isCellEditable(int row, int column){if(!Global.userOrAdmin.equals("Admin"))return false;else return true;}}

    );
    jScrollPane3.setViewportView(colorTable);

    change.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    change.setForeground(new java.awt.Color(0, 0, 153));
    change.setText("Change Image");
    change.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    change.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            changeActionPerformed(evt);
        }
    });

    search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    search.setForeground(new java.awt.Color(0, 0, 153));
    search.setText("Search");
    search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    search.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchActionPerformed(evt);
        }
    });

    txt_search.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txt_searchActionPerformed(evt);
        }
    });

    logout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    logout.setForeground(new java.awt.Color(0, 0, 153));
    logout.setText("Logout");
    logout.setBorder(null);
    logout.setBorderPainted(false);
    logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    logout.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logoutActionPerformed(evt);
        }
    });

    buy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    buy.setForeground(new java.awt.Color(0, 0, 153));
    buy.setText("Buy");
    buy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    buy.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            buyActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(51, 51, 51)
            .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(477, 477, 477)
            .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 602, Short.MAX_VALUE))
        .addGroup(layout.createSequentialGroup()
            .addGap(38, 38, 38)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(type)
                    .addComponent(model)
                    .addComponent(year)
                    .addComponent(price)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buy, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(17, 17, 17))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jLabel3)))
                    .addGap(31, 31, 31))
                .addGroup(layout.createSequentialGroup()
                    .addGap(160, 160, 160)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(29, 29, 29)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search)
                            .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(buy, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44))
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(1, 1, 1)
                            .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(7, 7, 7)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(change))))
            .addGap(0, 23, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    int ID;
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        try {
            file = null;
            // TODO add your handling code here:
            connection conn = new connection();
            int i = table.getSelectedRow();
            //to show change, delete, and update buttons only if an admin logins
            if (Global.userOrAdmin.equals("Admin"))
            {
                 change.setVisible(true);
                 delete.setVisible(true);
                 update.setVisible(true);
                 
            }
            TableModel tableModel = table.getModel();
              ID = (int) table.getModel().getValueAt(table.getSelectedRow(),2);
              Global.person1.viewCarDetails(conn, tableModel, i, ID, type, model, year, price, imageLabel);
              showColor();
            conn.Close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }    
    }//GEN-LAST:event_tableMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        try{
            connection conn = new connection();
            Global.admin1.deleteCar(conn, ID);
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            DefaultTableModel colorModel = (DefaultTableModel) colorTable.getModel();
            JOptionPane.showMessageDialog(null, "Deleted successfully");
            model.setRowCount(0);
            showCar();
            colorModel.setRowCount(0);
            showColor();
            reset();
            conn.Close();
        }catch(Exception ex){
           JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        try{
                DefaultTableModel colorModel = (DefaultTableModel) colorTable.getModel();
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
            //to make sure there're no empty fields
            if(type.getText().equals("")||model.getText().equals("")||price.getText().equals("")||year.getText().equals("")){
              JOptionPane.showMessageDialog(null, "Some fields are empty");  
              tableModel.setRowCount(0);
                showCar();
                reset();
                colorModel.setRowCount(0);
            }
            else{
                boolean empty = false;
                boolean valid = true;
                for (int i=0;i<colorModel.getRowCount();i++){
                    if(colorModel.getValueAt(i, 0).toString().equals("")||
                        colorModel.getValueAt(i, 1).toString().equals("")){
                        empty = true;
                    }
                    else if(Integer.parseInt(colorModel.getValueAt(i, 1).toString()) < 0){
                        valid  = false;
                    }
                }
               if(empty){                    
                   JOptionPane.showMessageDialog(null, "Some fields are empty");
                   tableModel.setRowCount(0);
                    showCar();
                    reset();
                    colorModel.setRowCount(0);
               }
               else if(!valid){
                   JOptionPane.showMessageDialog(null,"Please enter a valid car number");
                    tableModel.setRowCount(0);
                    showCar();
                    reset();
                    colorModel.setRowCount(0);
               }
               else {
                connection conn = new connection();
                int row = table.getSelectedRow();
                int colorRow = 0;
                Global.admin1.updateCar(conn, type, model, year, price, filename, ID, file);
                Global.admin1.updateCar(conn, colorTable, ID);
                //to delete the car if an admin sets all the numbers to 0
                if(!Global.user1.getCarNumber(ID, conn)){
                    Global.user1.deleteCar(conn, ID);
                    JOptionPane.showMessageDialog(null, "Deleted because there's no available colors");
            }
                else
                    JOptionPane.showMessageDialog(null, "Updated successfully");
                tableModel.setRowCount(0);
                showCar();
                reset();
                colorModel.setRowCount(0);
                conn.Close();
            }
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        
        
    }//GEN-LAST:event_updateActionPerformed
boolean is_search=false;
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(is_search)
        {
            try {
                is_search=false;
                txt_search.setText("");
                reset();
                 DefaultTableModel Model = (DefaultTableModel)table.getModel();
            Model.setRowCount(0);
                DefaultTableModel colorModel = (DefaultTableModel)colorTable.getModel();
            colorModel.setRowCount(0);
                showCar();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        else if(Global.userOrAdmin.equals("Admin")){
            this.dispose();
            new AdminMenu().setVisible(true);
        }
           
        else if (Global.userOrAdmin.equals("Guest")){
            this.dispose();
            new StartMenu().setVisible(true);
        }
    }//GEN-LAST:event_backActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_imageLabelMouseClicked
FileInputStream filename;
File file;
    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        // TODO add your handling code here:
           JFileChooser chooser = new JFileChooser();
            chooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "tif"));
        int returnVal = chooser.showOpenDialog(chooser);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            try {
               connection conn = new connection();
                 file = chooser.getSelectedFile();
                filename = new FileInputStream(file);
                    ImageIcon icon= new ImageIcon(new ImageIcon(chooser.getSelectedFile().getAbsolutePath()).
                    getImage().getScaledInstance(640, 480, Image.SCALE_SMOOTH));
                    imageLabel.setIcon(icon);
                    conn.Close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_changeActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        try {
            // TODO add your handling code here:
            is_search = true;
            connection conn = new connection();
            boolean isFound = Global.person1.search(txt_search, colorTable, list, table);
             if (!isFound)
            {
                 JOptionPane.showMessageDialog(null, "Not Found");
            }
            reset();
            conn.Close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        if (Global.userOrAdmin.equals("User")||Global.userOrAdmin.equals("Admin")){
            this.dispose();
            new StartMenu().setVisible(true);
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyActionPerformed
         try {
            connection conn = new connection();
            if(colorTable.getSelectedRow()<0)
        {
        JOptionPane.showMessageDialog(null, "Please select a car and a color");
        return;
        }
        DefaultTableModel colorModel = (DefaultTableModel) colorTable.getModel();
        DefaultTableModel  model = (DefaultTableModel) table.getModel();
        //to decrease number of colors when a user buys it
        Global.user1.decreaseNumber(conn, ID, colorModel, colorTable);
                if(Global.user1.getCarNumber(conn, ID, colorModel, colorTable)==0){
                    Global.user1.deleteColor(conn, ID, colorModel, colorTable);
                }
                //to delete the car if all the colors are sold out
                if(!Global.user1.getCarNumber(ID, conn)){
                      Global.user1.deleteCar(conn, ID);
                }
                JOptionPane.showMessageDialog(null, "Bought successfully!");
                reset();
                model.setRowCount(0);
                colorModel.setRowCount(0);
                showCar();
                conn.Close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);

        }    
    }//GEN-LAST:event_buyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewCars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewCars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewCars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewCars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new viewCars().setVisible(true);
                } catch (SQLException ex) {
                   JOptionPane.showMessageDialog(null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton buy;
    private javax.swing.JButton change;
    private javax.swing.JTable colorTable;
    private javax.swing.JButton delete;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logout;
    private javax.swing.JTextField model;
    private javax.swing.JTextField price;
    private javax.swing.JButton search;
    private javax.swing.JTable table;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField type;
    private javax.swing.JButton update;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables
}
